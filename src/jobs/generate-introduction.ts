import { createChatCompletion } from "@/server/open-ai/ai";
import { Job } from "./jobs";
import { Conversation, Slide } from "@/server/presentation-generator";
import { GeneratePresentationJob } from "./generate-presentation";



async function createIntroduction(prompt:string): Promise<Conversation | null> {
    const conversation: Conversation = {
        chat: [],
        result: ""
    }
    const promptParts: string[] = [`Acting like a presentor for a slideshow presentation, create a short introduction to get the crowd interested in the presentation. You must do the following:`];  
    promptParts.push("1) Mention that the presentation is generated by AI");
    promptParts.push("2) Try to get users to donate using the link at the bottom of the page to support presentations like this generated by AI.");
    promptParts.push("3) Give a quick introduction to the presentor of the presentation.");  
    promptParts.push("4) Use the below presentation JSON data while creating the introduction.");  
    promptParts.push(prompt);
    const promptJoined = promptParts.join("\n");
    conversation.chat.push(promptJoined);
    try {
        const result = await createChatCompletion(promptJoined);
        conversation.chat.push(result);
        conversation.result = result;

        return conversation;
    } catch (e) {
        console.error(e);
        return null;
    }
}



export class GenerateIntroductionJob extends Job<{ presentationId: string, slides: Slide[], presentor: string}> {
    static topic = 'generate-introduction';
    async onRun(): Promise<void> {
        const slides = this.getParameter("slides");
        const presentor = this.getParameter("presentor");

        const prompt = JSON.stringify({
            slides: slides,
            presentor: presentor
        });

        const conversation = await createIntroduction(prompt);
        if (conversation == null) {
            return;
        }
        await GeneratePresentationJob.setIntroduction(this.getParameter("presentationId")?.toString(), conversation);
        await GeneratePresentationJob.publishPresentation(this.getParameter("presentationId")?.toString());
    }
}